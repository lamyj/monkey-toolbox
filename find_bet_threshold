#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

import bet

def main():
    parser = argparse.ArgumentParser(description="Determine best BET threshold on image")
    parser.add_argument("input", help="Input image")
    parser.add_argument(
        "-f", "--threshold", 
        action="append", default=[], help="BET threshold value")
    parser.add_argument(
        "-c", "--cog",
        help="Center of gravity (voxels not mm) of initial mesh surface, "
            "if unspecified, use robust brain centre estimation")
    arguments = parser.parse_args()
    
    if arguments.cog:
        arguments.cog = [float(x) for x in arguments.cog.split(",")]
    
    if not os.path.isfile("N4.nii.gz"):
        print("Running N4BiasFieldCorrection...")
        subprocess.check_call([
            "N4BiasFieldCorrection", "-i", arguments.input, "-o", "N4.nii.gz"])
    
    for threshold in arguments.threshold:
        print("Running BET with threshold {}...".format(threshold))
        
        output = "bet_{}.nii.gz".format(threshold)
        bet.adjust_voxel_size("N4.nii.gz", output)
        bet.bet(output, output, True, threshold, arguments.cog)
        bet.restore_voxel_size(output, "N4.nii.gz")
    processes = []
    for value in arguments.threshold:
        process = subprocess.Popen([
            "itksnap", 
            "-g", "N4.nii.gz", "-s", "bet_{}_mask.nii.gz".format(value)])
        processes.append(process)
    
    for process in processes:
        process.communicate()
    
    for value in arguments.threshold:
        os.remove("bet_{}.nii.gz".format(value))
        os.remove("bet_{}_mask.nii.gz".format(value))

if __name__ == "__main__":
    sys.exit(main())
